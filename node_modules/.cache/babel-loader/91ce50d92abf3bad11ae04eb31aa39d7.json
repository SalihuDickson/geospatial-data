{"ast":null,"code":"var _jsxFileName = \"/home/salihu/React/Projects/geospatial-data/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { csv, scaleLinear, scaleTime, max, timeFormat, extent } from \"d3\";\nimport useData from \"./useData\";\nimport AxisBottom from \"./AxisBottom\";\nimport AxisLeft from \"./AxisLeft\";\nimport Marks from \"./Marks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 500;\nconst margin = {\n  top: 20,\n  right: 30,\n  bottom: 65,\n  left: 90\n};\nconst xAxisLabelOffset = 50;\nconst yAxisLabelOffset = 45;\n\nconst App = () => {\n  _s();\n\n  const data = useData();\n  console.log(data);\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  const innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width - margin.left - margin.right;\n\n  const xValue = d => d.timestamp;\n\n  const xAxisLabel = \"Time\";\n\n  const yValue = d => d.temperature;\n\n  const yAxisLabel = \"Temperature\";\n  const xAxisTickFormat = timeFormat(\"%a\");\n  const xScale = scaleTime().domain(extent(data, xValue)).range([0, innerWidth]).nice();\n  const yScale = scaleLinear().domain(extent(data, yValue)).range([innerHeight, 0]).nice();\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${margin.left},${margin.top})`,\n      children: [/*#__PURE__*/_jsxDEV(AxisBottom, {\n        xScale: xScale,\n        innerHeight: innerHeight,\n        tickFormat: xAxisTickFormat,\n        tickOffset: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"axis-label\",\n        textAnchor: \"middle\",\n        transform: `translate(${-yAxisLabelOffset},${innerHeight / 2}) rotate(-90)`,\n        children: yAxisLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n        yScale: yScale,\n        innerWidth: innerWidth,\n        tickOffset: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"axis-label\",\n        x: innerWidth / 2,\n        y: innerHeight + xAxisLabelOffset,\n        textAnchor: \"middle\",\n        children: xAxisLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marks, {\n        data: data,\n        xScale: xScale,\n        yScale: yScale,\n        xValue: xValue,\n        yValue: yValue,\n        tooltipFormat: xAxisTickFormat,\n        circleRadius: 3.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"YnzXR8fPhsYQOtPUC4zYRXREqzc=\", false, function () {\n  return [useData];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/salihu/React/Projects/geospatial-data/src/App.js"],"names":["React","useState","useEffect","csv","scaleLinear","scaleTime","max","timeFormat","extent","useData","AxisBottom","AxisLeft","Marks","width","height","margin","top","right","bottom","left","xAxisLabelOffset","yAxisLabelOffset","App","data","console","log","innerHeight","innerWidth","xValue","d","timestamp","xAxisLabel","yValue","temperature","yAxisLabel","xAxisTickFormat","xScale","domain","range","nice","yScale"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { csv, scaleLinear, scaleTime, max, timeFormat, extent } from \"d3\";\nimport useData from \"./useData\";\nimport AxisBottom from \"./AxisBottom\";\nimport AxisLeft from \"./AxisLeft\";\nimport Marks from \"./Marks\";\n\nconst width = 960;\nconst height = 500;\nconst margin = { top: 20, right: 30, bottom: 65, left: 90 };\nconst xAxisLabelOffset = 50;\nconst yAxisLabelOffset = 45;\n\nconst App = () => {\n  const data = useData();\n  console.log(data);\n\n  if (!data) {\n    return <pre>Loading...</pre>;\n  }\n\n  const innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width - margin.left - margin.right;\n\n  const xValue = (d) => d.timestamp;\n  const xAxisLabel = \"Time\";\n\n  const yValue = (d) => d.temperature;\n  const yAxisLabel = \"Temperature\";\n\n  const xAxisTickFormat = timeFormat(\"%a\");\n\n  const xScale = scaleTime()\n    .domain(extent(data, xValue))\n    .range([0, innerWidth])\n    .nice();\n\n  const yScale = scaleLinear()\n    .domain(extent(data, yValue))\n    .range([innerHeight, 0])\n    .nice();\n\n  return (\n    <svg width={width} height={height}>\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <AxisBottom\n          xScale={xScale}\n          innerHeight={innerHeight}\n          tickFormat={xAxisTickFormat}\n          tickOffset={5}\n        />\n        <text\n          className=\"axis-label\"\n          textAnchor=\"middle\"\n          transform={`translate(${-yAxisLabelOffset},${\n            innerHeight / 2\n          }) rotate(-90)`}\n        >\n          {yAxisLabel}\n        </text>\n        <AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />\n        <text\n          className=\"axis-label\"\n          x={innerWidth / 2}\n          y={innerHeight + xAxisLabelOffset}\n          textAnchor=\"middle\"\n        >\n          {xAxisLabel}\n        </text>\n        <Marks\n          data={data}\n          xScale={xScale}\n          yScale={yScale}\n          xValue={xValue}\n          yValue={yValue}\n          tooltipFormat={xAxisTickFormat}\n          circleRadius={3.5}\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}