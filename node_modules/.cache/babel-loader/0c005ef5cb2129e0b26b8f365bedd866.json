{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\nimport { feature, mesh } from \"topojson\";\nconst jsonUrl = \"https://unpkg.com/world-atlas@2.0.2/countries-50m.json\";\n\nconst useData = () => {\n  _s();\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    json(jsonUrl).then(topology => {\n      const {\n        countries,\n        land\n      } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interior: mesh(topology, countries, (a, b) => a != b)\n      });\n    });\n  }, []);\n  return data;\n};\n\n_s(useData, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\nexport default useData;","map":{"version":3,"sources":["/home/salihu/React/Projects/geospatial-data/src/useData.js"],"names":["React","useState","useEffect","json","feature","mesh","jsonUrl","useData","data","setData","then","topology","countries","land","objects","interior","a","b"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,UAA9B;AAEA,MAAMC,OAAO,GAAG,wDAAhB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,IAAI,CAACG,OAAD,CAAJ,CAAcI,IAAd,CAAoBC,QAAD,IAAc;AAC/B,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAsBF,QAAQ,CAACG,OAArC;AACAL,MAAAA,OAAO,CAAC;AACNI,QAAAA,IAAI,EAAET,OAAO,CAACO,QAAD,EAAWE,IAAX,CADP;AAENE,QAAAA,QAAQ,EAAEV,IAAI,CAACM,QAAD,EAAWC,SAAX,EAAsB,CAACI,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAArC;AAFR,OAAD,CAAP;AAID,KAND;AAOD,GARQ,EAQN,EARM,CAAT;AAUA,SAAOT,IAAP;AACD,CAdD;;GAAMD,O;;AAgBN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\nimport { feature, mesh } from \"topojson\";\n\nconst jsonUrl = \"https://unpkg.com/world-atlas@2.0.2/countries-50m.json\";\n\nconst useData = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    json(jsonUrl).then((topology) => {\n      const { countries, land } = topology.objects;\n      setData({\n        land: feature(topology, land),\n        interior: mesh(topology, countries, (a, b) => a != b),\n      });\n    });\n  }, []);\n\n  return data;\n};\n\nexport default useData;\n"]},"metadata":{},"sourceType":"module"}